
//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `MACBOOKs-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/totem-parachain-collator
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_collective
// --extrinsic=*
// --steps=50
// --repeat=20
// --json
// --output=./weights/pallet_collective-new-test.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	// Storage: TechnicalCouncil Members (r:1 w:1)
	// Storage: TechnicalCouncil Proposals (r:1 w:0)
	// Storage: TechnicalCouncil Prime (r:0 w:1)
	// Storage: TechnicalCouncil Voting (r:100 w:100)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Minimum execution time: 33_000 nanoseconds.
		Weight::from_ref_time(35_000_000)
			// Standard Error: 119_256
			.saturating_add(Weight::from_ref_time(6_720_552).saturating_mul(m.into()))
			// Standard Error: 119_256
			.saturating_add(Weight::from_ref_time(13_304_392).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
	}
	// Storage: TechnicalCouncil Members (r:1 w:0)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(_b: u32, m: u32, ) -> Weight {
		// Minimum execution time: 45_000 nanoseconds.
		Weight::from_ref_time(55_555_549)
			// Standard Error: 5_061
			.saturating_add(Weight::from_ref_time(22_877).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: TechnicalCouncil Members (r:1 w:0)
	// Storage: TechnicalCouncil ProposalOf (r:1 w:0)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_ref_time(53_896_674)
			// Standard Error: 401
			.saturating_add(Weight::from_ref_time(2_529).saturating_mul(b.into()))
			// Standard Error: 4_142
			.saturating_add(Weight::from_ref_time(41_509).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	// Storage: TechnicalCouncil Members (r:1 w:0)
	// Storage: TechnicalCouncil ProposalOf (r:1 w:1)
	// Storage: TechnicalCouncil Proposals (r:1 w:1)
	// Storage: TechnicalCouncil ProposalCount (r:1 w:1)
	// Storage: TechnicalCouncil Voting (r:0 w:1)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(_b: u32, _m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 64_000 nanoseconds.
		Weight::from_ref_time(80_589_412)
			// Standard Error: 5_907
			.saturating_add(Weight::from_ref_time(316_033).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: TechnicalCouncil Members (r:1 w:0)
	// Storage: TechnicalCouncil Voting (r:1 w:1)
	/// The range of component `m` is `[5, 100]`.
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Minimum execution time: 58_000 nanoseconds.
		Weight::from_ref_time(67_544_942)
			// Standard Error: 6_193
			.saturating_add(Weight::from_ref_time(99_770).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TechnicalCouncil Voting (r:1 w:1)
	// Storage: TechnicalCouncil Members (r:1 w:0)
	// Storage: TechnicalCouncil Proposals (r:1 w:1)
	// Storage: TechnicalCouncil ProposalOf (r:0 w:1)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_ref_time(72_723_032)
			// Standard Error: 11_736
			.saturating_add(Weight::from_ref_time(156_568).saturating_mul(m.into()))
			// Standard Error: 11_444
			.saturating_add(Weight::from_ref_time(335_039).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TechnicalCouncil Voting (r:1 w:1)
	// Storage: TechnicalCouncil Members (r:1 w:0)
	// Storage: TechnicalCouncil ProposalOf (r:1 w:1)
	// Storage: TechnicalCouncil Proposals (r:1 w:1)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(_b: u32, _m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 91_000 nanoseconds.
		Weight::from_ref_time(120_900_591)
			// Standard Error: 8_722
			.saturating_add(Weight::from_ref_time(378_279).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TechnicalCouncil Voting (r:1 w:1)
	// Storage: TechnicalCouncil Members (r:1 w:0)
	// Storage: TechnicalCouncil Prime (r:1 w:0)
	// Storage: TechnicalCouncil Proposals (r:1 w:1)
	// Storage: TechnicalCouncil ProposalOf (r:0 w:1)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_ref_time(85_028_924)
			// Standard Error: 6_684
			.saturating_add(Weight::from_ref_time(82_991).saturating_mul(m.into()))
			// Standard Error: 6_517
			.saturating_add(Weight::from_ref_time(265_219).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TechnicalCouncil Voting (r:1 w:1)
	// Storage: TechnicalCouncil Members (r:1 w:0)
	// Storage: TechnicalCouncil Prime (r:1 w:0)
	// Storage: TechnicalCouncil ProposalOf (r:1 w:1)
	// Storage: TechnicalCouncil Proposals (r:1 w:1)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 100_000 nanoseconds.
		Weight::from_ref_time(106_490_236)
			// Standard Error: 676
			.saturating_add(Weight::from_ref_time(849).saturating_mul(b.into()))
			// Standard Error: 7_154
			.saturating_add(Weight::from_ref_time(60_083).saturating_mul(m.into()))
			// Standard Error: 6_974
			.saturating_add(Weight::from_ref_time(376_720).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TechnicalCouncil Proposals (r:1 w:1)
	// Storage: TechnicalCouncil Voting (r:0 w:1)
	// Storage: TechnicalCouncil ProposalOf (r:0 w:1)
	/// The range of component `p` is `[1, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_ref_time(55_670_005)
			// Standard Error: 3_647
			.saturating_add(Weight::from_ref_time(219_032).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
