
//! Autogenerated weights for `pallet_unit_of_account`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ubuntu-s-8vcpu-16gb-fra1-01`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/totem-parachain-collator
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_unit_of_account
// --extrinsic=*
// --steps=50
// --repeat=20
// --json
// --output=./weights/pallet_unit_of_account-new-test.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use frame_support::weights::constants::RocksDbWeight;
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_unit_of_account.
pub trait WeightInfo {
	fn whitelist_account() -> Weight;
	fn remove_account() -> Weight;
	fn add_new_asset() -> Weight;
	fn remove_asset() -> Weight;
	fn update_asset_price() -> Weight;
	fn update_asset_issuance() -> Weight;
}

/// Weight functions for `pallet_unit_of_account`.
pub struct TotemWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for TotemWeight<T> {
	// Storage: UnitOfAccount WhitelistedAccountsCount (r:1 w:1)
	// Storage: UnitOfAccount WhitelistedAccounts (r:1 w:1)
	// Storage: UnitOfAccount DepositAccount (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Accounting PostingNumber (r:1 w:1)
	// Storage: Accounting BalanceByLedger (r:4 w:4)
	// Storage: Accounting GlobalLedger (r:2 w:2)
	// Storage: Accounting PostingDetail (r:0 w:4)
	fn whitelist_account() -> Weight {
		// Minimum execution time: 243_050 nanoseconds.
		Weight::from_ref_time(260_692_000)
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(15))
	}
	// Storage: UnitOfAccount WhitelistedAccounts (r:1 w:1)
	// Storage: UnitOfAccount DepositAccount (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Accounting PostingNumber (r:1 w:1)
	// Storage: Accounting BalanceByLedger (r:4 w:4)
	// Storage: Accounting GlobalLedger (r:2 w:2)
	// Storage: UnitOfAccount WhitelistedAccountsCount (r:1 w:1)
	// Storage: Accounting PostingDetail (r:0 w:4)
	fn remove_account() -> Weight {
		// Minimum execution time: 247_498 nanoseconds.
		Weight::from_ref_time(252_500_000)
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(14))
	}
	// Storage: UnitOfAccount WhitelistedAccounts (r:1 w:0)
	// Storage: UnitOfAccount Tickersymbol (r:1 w:1)
	// Storage: UnitOfAccount AssetBasket (r:1 w:1)
	// Storage: UnitOfAccount TotalInverseIssuance (r:0 w:1)
	// Storage: UnitOfAccount UnitOfAccount (r:0 w:1)
	fn add_new_asset() -> Weight {
		// Minimum execution time: 75_917 nanoseconds.
		Weight::from_ref_time(133_121_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: UnitOfAccount Tickersymbol (r:1 w:1)
	// Storage: UnitOfAccount AssetBasket (r:1 w:1)
	// Storage: UnitOfAccount TotalInverseIssuance (r:0 w:1)
	// Storage: UnitOfAccount UnitOfAccount (r:0 w:1)
	fn remove_asset() -> Weight {
		// Minimum execution time: 65_850 nanoseconds.
		Weight::from_ref_time(114_365_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: UnitOfAccount AssetBasket (r:1 w:1)
	// Storage: UnitOfAccount TotalInverseIssuance (r:0 w:1)
	// Storage: UnitOfAccount UnitOfAccount (r:0 w:1)
	fn update_asset_price() -> Weight {
		// Minimum execution time: 72_255 nanoseconds.
		Weight::from_ref_time(114_555_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: UnitOfAccount AssetBasket (r:1 w:1)
	// Storage: UnitOfAccount TotalInverseIssuance (r:0 w:1)
	// Storage: UnitOfAccount UnitOfAccount (r:0 w:1)
	fn update_asset_issuance() -> Weight {
		// Minimum execution time: 61_990 nanoseconds.
		Weight::from_ref_time(63_346_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn whitelist_account() -> Weight {
		Weight::from_ref_time(260_692_000)
			.saturating_add(RocksDbWeight::get().reads(14))
			.saturating_add(RocksDbWeight::get().writes(15))
	}

	fn remove_account() -> Weight {
		Weight::from_ref_time(252_500_000)
			.saturating_add(RocksDbWeight::get().reads(14))
			.saturating_add(RocksDbWeight::get().writes(14))
	}

	fn add_new_asset() -> Weight {
		Weight::from_ref_time(133_121_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn remove_asset() -> Weight {
		Weight::from_ref_time(114_365_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn update_asset_price() -> Weight {
		Weight::from_ref_time(114_555_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn update_asset_issuance() -> Weight {
		Weight::from_ref_time(63_346_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}
