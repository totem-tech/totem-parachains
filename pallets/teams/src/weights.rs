
//! Autogenerated weights for `pallet_teams`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ubuntu-s-8vcpu-16gb-fra1-01`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/totem-parachain-collator
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_teams
// --extrinsic=*
// --steps=50
// --repeat=20
// --json
// --output=./weights/pallet_teams-new-test.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use frame_support::weights::constants::RocksDbWeight;
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_unit_of_account.
pub trait WeightInfo {
	fn add_new_team() -> Weight;
	fn remove_team() -> Weight;
	fn reassign_team() -> Weight;
	fn close_team() -> Weight;
	fn reopen_team() -> Weight;
	fn set_status_team() -> Weight;
}


/// Weight functions for `pallet_teams`.
pub struct TotemWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for TotemWeight<T> {
	// Storage: Teams TeamHashStatus (r:1 w:1)
	// Storage: Teams DeletedTeams (r:1 w:0)
	// Storage: Teams TeamHashOwner (r:0 w:1)
	// Storage: Teams OwnerTeamsList (r:0 w:1)
	fn add_new_team() -> Weight {
		// Minimum execution time: 59_272 nanoseconds.
		Weight::from_ref_time(65_705_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Teams TeamHashStatus (r:1 w:1)
	// Storage: Teams TeamHashOwner (r:1 w:1)
	// Storage: Teams OwnerTeamsList (r:1 w:1)
	// Storage: Teams DeletedTeams (r:1 w:1)
	fn remove_team() -> Weight {
		// Minimum execution time: 77_152 nanoseconds.
		Weight::from_ref_time(81_192_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Teams TeamHashStatus (r:1 w:0)
	// Storage: Teams TeamHashOwner (r:1 w:1)
	// Storage: Teams OwnerTeamsList (r:2 w:2)
	fn reassign_team() -> Weight {
		// Minimum execution time: 75_910 nanoseconds.
		Weight::from_ref_time(87_614_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Teams TeamHashStatus (r:1 w:1)
	// Storage: Teams TeamHashOwner (r:1 w:0)
	fn close_team() -> Weight {
		// Minimum execution time: 58_264 nanoseconds.
		Weight::from_ref_time(60_337_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Teams TeamHashStatus (r:1 w:1)
	// Storage: Teams TeamHashOwner (r:1 w:0)
	fn reopen_team() -> Weight {
		// Minimum execution time: 62_905 nanoseconds.
		Weight::from_ref_time(113_360_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Teams TeamHashStatus (r:1 w:1)
	// Storage: Teams TeamHashOwner (r:1 w:0)
	fn set_status_team() -> Weight {
		// Minimum execution time: 60_940 nanoseconds.
		Weight::from_ref_time(62_363_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn add_new_team() -> Weight {
		Weight::from_ref_time(65_705_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn remove_team() -> Weight {
		Weight::from_ref_time(81_192_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn reassign_team() -> Weight {
		Weight::from_ref_time(87_614_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn close_team() -> Weight {
		Weight::from_ref_time(60_337_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn reopen_team() -> Weight {
		Weight::from_ref_time(113_360_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn set_status_team() -> Weight {
		Weight::from_ref_time(62_363_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
