
//! Autogenerated weights for `pallet_archive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ubuntu-s-8vcpu-16gb-fra1-01`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/totem-parachain-collator
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_archive
// --extrinsic=*
// --steps=50
// --repeat=20
// --json
// --output=./weights/pallet_archive-new-test.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use frame_support::weights::constants::RocksDbWeight;
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_archive.
pub trait WeightInfo {
	fn archive_record() -> Weight;
}

/// Weight functions for `pallet_archive`.
pub struct TotemWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for TotemWeight<T> {
	// Storage: Timekeeping TimeRecord (r:1 w:0)
	// Storage: Timekeeping WorkerTimeRecordsHashList (r:1 w:1)
	// Storage: Timekeeping WorkerTimeRecordsHashListArchive (r:1 w:1)
	// Storage: Teams TeamHashOwner (r:1 w:0)
	// Storage: Timekeeping TeamTimeRecordsHashList (r:1 w:0)
	// Storage: Timekeeping TeamTimeRecordsHashListArchive (r:1 w:1)
	fn archive_record() -> Weight {
		// Minimum execution time: 68_159 nanoseconds.
		Weight::from_ref_time(69_282_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

impl WeightInfo for () {
	fn archive_record() -> Weight {
		Weight::from_ref_time(69_282_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}
