
//! Autogenerated weights for `pallet_timekeeping`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ubuntu-s-8vcpu-16gb-fra1-01`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/totem-parachain-collator
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_timekeeping
// --extrinsic=*
// --steps=50
// --repeat=20
// --json
// --output=./weights/pallet_timekeeping-new-test.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use frame_support::weights::constants::RocksDbWeight;
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_unit_of_account.
pub trait WeightInfo {
	fn notify_team_worker() -> Weight;
	fn worker_acceptance_team() -> Weight;
	fn submit_time() -> Weight;
	fn authorise_time() -> Weight;
}

/// Weight functions for `pallet_timekeeping`.
pub struct TotemWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for TotemWeight<T> {
	// Storage: Teams TeamHashStatus (r:1 w:0)
	// Storage: Teams TeamHashOwner (r:1 w:0)
	// Storage: Timekeeping WorkerTeamsBacklogStatus (r:1 w:1)
	// Storage: Timekeeping WorkerTeamsBacklogList (r:1 w:1)
	// Storage: Timekeeping TeamInvitesList (r:1 w:1)
	fn notify_team_worker() -> Weight {
		// Minimum execution time: 78_199 nanoseconds.
		Weight::from_ref_time(79_415_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Teams TeamHashStatus (r:1 w:0)
	// Storage: Timekeeping WorkerTeamsBacklogList (r:1 w:0)
	// Storage: Timekeeping WorkerTeamsBacklogStatus (r:1 w:1)
	// Storage: Timekeeping TeamWorkersList (r:1 w:1)
	// Storage: Timekeeping TeamInvitesList (r:1 w:1)
	fn worker_acceptance_team() -> Weight {
		// Minimum execution time: 93_084 nanoseconds.
		Weight::from_ref_time(148_251_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Teams TeamHashStatus (r:1 w:0)
	// Storage: Timekeeping TeamWorkersBanList (r:1 w:0)
	// Storage: Timekeeping TeamWorkersList (r:1 w:0)
	// Storage: Timekeeping TimeRecord (r:1 w:1)
	// Storage: Timekeeping TotalBlocksPerTeam (r:1 w:1)
	// Storage: Timekeeping TotalBlocksPerAddress (r:1 w:1)
	// Storage: Timekeeping TotalBlocksPerTeamPerAddress (r:1 w:1)
	fn submit_time() -> Weight {
		// Minimum execution time: 110_115 nanoseconds.
		Weight::from_ref_time(112_747_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Teams TeamHashStatus (r:1 w:0)
	// Storage: Teams TeamHashOwner (r:1 w:0)
	// Storage: Timekeeping TimeRecord (r:1 w:1)
	// Storage: Timekeeping TotalBlocksPerTeam (r:1 w:1)
	// Storage: Timekeeping TotalBlocksPerAddress (r:1 w:1)
	// Storage: Timekeeping TotalBlocksPerTeamPerAddress (r:1 w:1)
	// Storage: Timekeeping TeamFirstSeen (r:0 w:1)
	fn authorise_time() -> Weight {
		// Minimum execution time: 113_882 nanoseconds.
		Weight::from_ref_time(122_779_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
}

impl WeightInfo for () {
	fn notify_team_worker() -> Weight {
		Weight::from_ref_time(79_415_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn worker_acceptance_team() -> Weight {
		Weight::from_ref_time(148_251_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn submit_time() -> Weight {
		Weight::from_ref_time(112_747_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn authorise_time() -> Weight {
		Weight::from_ref_time(122_779_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
}
