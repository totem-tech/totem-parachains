
//! Autogenerated weights for `pallet_orders`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ubuntu-s-8vcpu-16gb-fra1-01`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/totem-parachain-collator
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_orders
// --extrinsic=*
// --steps=50
// --repeat=20
// --json
// --output=./weights/pallet_orders-new-test.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use frame_support::weights::constants::RocksDbWeight;
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_unit_of_account.
pub trait WeightInfo {
	fn create_order() -> Weight;
	fn delete_order() -> Weight;
	fn create_spfso() -> Weight;
	fn change_spfso() -> Weight;
	fn change_approval() -> Weight;
	fn handle_spfso() -> Weight;
}

/// Weight functions for `pallet_orders`.
pub struct TotemWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for TotemWeight<T> {
	// Storage: Bonsai IsSuccessful (r:1 w:1)
	// Storage: Bonsai IsStarted (r:1 w:1)
	// Storage: Bonsai TxList (r:1 w:1)
	// Storage: Orders Orders (r:2 w:1)
	// Storage: Orders Approver (r:1 w:1)
	// Storage: Orders Postulate (r:1 w:1)
	// Storage: Orders Owner (r:1 w:1)
	// Storage: Orders Beneficiary (r:1 w:1)
	// Storage: Orders OrderItems (r:0 w:1)
	fn create_order() -> Weight {
		// Minimum execution time: 202_974 nanoseconds.
		Weight::from_ref_time(223_130_000)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: Bonsai IsSuccessful (r:1 w:1)
	// Storage: Bonsai IsStarted (r:1 w:1)
	// Storage: Bonsai TxList (r:1 w:1)
	// Storage: Orders Orders (r:1 w:1)
	// Storage: Orders Owner (r:1 w:1)
	// Storage: Orders Beneficiary (r:1 w:1)
	// Storage: Orders Approver (r:1 w:0)
	// Storage: Orders OrderItems (r:0 w:1)
	// Storage: Orders Postulate (r:0 w:1)
	fn delete_order() -> Weight {
		// Minimum execution time: 186_889 nanoseconds.
		Weight::from_ref_time(192_439_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Bonsai IsSuccessful (r:1 w:1)
	// Storage: Bonsai IsStarted (r:1 w:1)
	// Storage: Bonsai TxList (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Orders Orders (r:1 w:1)
	// Storage: Orders Approver (r:1 w:1)
	// Storage: Prefunding ReferenceStatus (r:1 w:1)
	// Storage: Escrow Escrowed (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Accounting PostingNumber (r:1 w:1)
	// Storage: Accounting BalanceByLedger (r:3 w:3)
	// Storage: Accounting GlobalLedger (r:3 w:3)
	// Storage: Prefunding OwnerPrefundingHashList (r:1 w:1)
	// Storage: Orders Owner (r:1 w:1)
	// Storage: Orders Beneficiary (r:1 w:1)
	// Storage: Orders OrderItems (r:0 w:1)
	// Storage: Accounting PostingDetail (r:0 w:3)
	// Storage: Bonsai IsValidRecord (r:0 w:1)
	// Storage: Prefunding PrefundingHashOwner (r:0 w:1)
	// Storage: Prefunding Prefunding (r:0 w:1)
	fn create_spfso() -> Weight {
		// Minimum execution time: 363_332 nanoseconds.
		Weight::from_ref_time(524_083_000)
			.saturating_add(T::DbWeight::get().reads(21))
			.saturating_add(T::DbWeight::get().writes(25))
	}
	// Storage: Bonsai IsSuccessful (r:1 w:1)
	// Storage: Bonsai IsStarted (r:1 w:1)
	// Storage: Bonsai TxList (r:1 w:1)
	// Storage: Orders Orders (r:1 w:1)
	// Storage: Orders Owner (r:1 w:1)
	// Storage: Orders Beneficiary (r:1 w:1)
	// Storage: Orders OrderItems (r:0 w:1)
	// Storage: Bonsai IsValidRecord (r:0 w:1)
	fn change_spfso() -> Weight {
		// Minimum execution time: 133_832 nanoseconds.
		Weight::from_ref_time(142_223_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Bonsai IsSuccessful (r:1 w:1)
	// Storage: Bonsai IsStarted (r:1 w:1)
	// Storage: Bonsai TxList (r:1 w:1)
	// Storage: Orders Orders (r:1 w:1)
	fn change_approval() -> Weight {
		// Minimum execution time: 100_729 nanoseconds.
		Weight::from_ref_time(146_489_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Bonsai IsSuccessful (r:1 w:1)
	// Storage: Bonsai IsStarted (r:1 w:1)
	// Storage: Bonsai TxList (r:1 w:1)
	// Storage: Orders Orders (r:1 w:1)
	// Storage: Prefunding PrefundingHashOwner (r:1 w:1)
	// Storage: Prefunding Prefunding (r:1 w:1)
	// Storage: Accounting PostingNumber (r:1 w:1)
	// Storage: Accounting BalanceByLedger (r:10 w:10)
	// Storage: Accounting GlobalLedger (r:8 w:8)
	// Storage: Prefunding ReferenceStatus (r:1 w:1)
	// Storage: Escrow Escrowed (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Prefunding OwnerPrefundingHashList (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Accounting PostingDetail (r:0 w:11)
	fn handle_spfso() -> Weight {
		// Minimum execution time: 645_752 nanoseconds.
		Weight::from_ref_time(811_259_000)
			.saturating_add(T::DbWeight::get().reads(33))
			.saturating_add(T::DbWeight::get().writes(41))
	}
}


impl WeightInfo for () {
	fn create_order() -> Weight {
		Weight::from_ref_time(223_130_000)
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(9))
	}

	fn delete_order() -> Weight {
		Weight::from_ref_time(192_439_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}

	fn create_spfso() -> Weight {
		Weight::from_ref_time(524_083_000)
			.saturating_add(RocksDbWeight::get().reads(21))
			.saturating_add(RocksDbWeight::get().writes(25))
	}

	fn change_spfso() -> Weight {
		Weight::from_ref_time(142_223_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(8))
	}

	fn change_approval() -> Weight {
		Weight::from_ref_time(146_489_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn handle_spfso() -> Weight {
		Weight::from_ref_time(811_259_000)
			.saturating_add(RocksDbWeight::get().reads(33))
			.saturating_add(RocksDbWeight::get().writes(41))
	}
}


