// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_balances
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm2`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/totem-parachain-collator
// benchmark
// pallet
// --chain=lego
// --steps=50
// --repeat=20
// --pallet=pallet_balances
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --template=./weight-template/totem-parachain-weight.hbs
// --output=./pallets/balances/src/weights-new.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_balances_totem.
pub trait WeightInfo {
	fn transfer() -> Weight;
	fn transfer_keep_alive() -> Weight;
	fn set_balance_creating() -> Weight;
	fn set_balance_killing() -> Weight;
	fn force_transfer() -> Weight;
	fn transfer_all() -> Weight;
	fn force_unreserve() -> Weight;
}

/// Weights for pallet_balances using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: System Account (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Accounting PostingNumber (r:1 w:1)
	// Storage: Accounting BalanceByLedger (r:4 w:4)
	// Storage: Accounting GlobalLedger (r:2 w:2)
	// Storage: Accounting PostingDetail (r:0 w:4)
	fn transfer() -> Weight {
		// Minimum execution time: 401_222 nanoseconds.
		Weight::from_ref_time(449_802_000 as u64)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Accounting PostingNumber (r:1 w:1)
	// Storage: Accounting BalanceByLedger (r:4 w:4)
	// Storage: Accounting GlobalLedger (r:2 w:2)
	// Storage: Accounting PostingDetail (r:0 w:4)
	fn transfer_keep_alive() -> Weight {
		// Minimum execution time: 259_060 nanoseconds.
		Weight::from_ref_time(417_939_000 as u64)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: System Account (r:1 w:1)
	fn set_balance_creating() -> Weight {
		// Minimum execution time: 93_120 nanoseconds.
		Weight::from_ref_time(97_804_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: System Account (r:1 w:1)
	fn set_balance_killing() -> Weight {
		// Minimum execution time: 109_070 nanoseconds.
		Weight::from_ref_time(113_298_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Accounting PostingNumber (r:1 w:1)
	// Storage: Accounting BalanceByLedger (r:4 w:4)
	// Storage: Accounting GlobalLedger (r:2 w:2)
	// Storage: Accounting PostingDetail (r:0 w:4)
	fn force_transfer() -> Weight {
		// Minimum execution time: 424_742 nanoseconds.
		Weight::from_ref_time(446_402_000 as u64)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(13 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Accounting PostingNumber (r:1 w:1)
	// Storage: Accounting BalanceByLedger (r:4 w:4)
	// Storage: Accounting GlobalLedger (r:2 w:2)
	// Storage: Accounting PostingDetail (r:0 w:4)
	fn transfer_all() -> Weight {
		// Minimum execution time: 418_174 nanoseconds.
		Weight::from_ref_time(454_420_000 as u64)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Accounting PostingNumber (r:1 w:1)
	// Storage: Accounting BalanceByLedger (r:2 w:2)
	// Storage: Accounting GlobalLedger (r:2 w:2)
	// Storage: Accounting PostingDetail (r:0 w:2)
	fn force_unreserve() -> Weight {
		// Minimum execution time: 247_109 nanoseconds.
		Weight::from_ref_time(262_610_000 as u64)
		.saturating_add(T::DbWeight::get().reads(9 as u64))
		.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
}
